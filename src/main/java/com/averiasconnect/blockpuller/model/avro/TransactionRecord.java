/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.averiasconnect.blockpuller.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Ethereum transaction */
@org.apache.avro.specific.AvroGenerated
public class TransactionRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3896694681057311418L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionRecord\",\"namespace\":\"com.averiasconnect.blockpuller.model.avro\",\"doc\":\"Ethereum transaction\",\"fields\":[{\"name\":\"blockHash\",\"type\":\"string\"},{\"name\":\"blockNumber\",\"type\":\"string\"},{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"gas\",\"type\":\"string\"},{\"name\":\"gasPrice\",\"type\":\"string\"},{\"name\":\"maxFeePerGas\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"maxPriorityFeePerGas\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"hash\",\"type\":\"string\"},{\"name\":\"input\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"nonce\",\"type\":\"string\"},{\"name\":\"to\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"transactionIndex\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"v\",\"type\":\"string\"},{\"name\":\"r\",\"type\":\"string\"},{\"name\":\"s\",\"type\":\"string\"},{\"name\":\"yParity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"timestamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransactionRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence blockHash;
  private java.lang.CharSequence blockNumber;
  private java.lang.CharSequence from;
  private java.lang.CharSequence gas;
  private java.lang.CharSequence gasPrice;
  private java.lang.CharSequence maxFeePerGas;
  private java.lang.CharSequence maxPriorityFeePerGas;
  private java.lang.CharSequence hash;
  private java.lang.CharSequence input;
  private java.lang.CharSequence nonce;
  private java.lang.CharSequence to;
  private java.lang.CharSequence transactionIndex;
  private java.lang.CharSequence value;
  private java.lang.CharSequence type;
  private java.lang.CharSequence chainId;
  private java.lang.CharSequence v;
  private java.lang.CharSequence r;
  private java.lang.CharSequence s;
  private java.lang.CharSequence yParity;
  private java.lang.CharSequence timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionRecord() {}

  /**
   * All-args constructor.
   * @param blockHash The new value for blockHash
   * @param blockNumber The new value for blockNumber
   * @param from The new value for from
   * @param gas The new value for gas
   * @param gasPrice The new value for gasPrice
   * @param maxFeePerGas The new value for maxFeePerGas
   * @param maxPriorityFeePerGas The new value for maxPriorityFeePerGas
   * @param hash The new value for hash
   * @param input The new value for input
   * @param nonce The new value for nonce
   * @param to The new value for to
   * @param transactionIndex The new value for transactionIndex
   * @param value The new value for value
   * @param type The new value for type
   * @param chainId The new value for chainId
   * @param v The new value for v
   * @param r The new value for r
   * @param s The new value for s
   * @param yParity The new value for yParity
   * @param timestamp The new value for timestamp
   */
  public TransactionRecord(java.lang.CharSequence blockHash, java.lang.CharSequence blockNumber, java.lang.CharSequence from, java.lang.CharSequence gas, java.lang.CharSequence gasPrice, java.lang.CharSequence maxFeePerGas, java.lang.CharSequence maxPriorityFeePerGas, java.lang.CharSequence hash, java.lang.CharSequence input, java.lang.CharSequence nonce, java.lang.CharSequence to, java.lang.CharSequence transactionIndex, java.lang.CharSequence value, java.lang.CharSequence type, java.lang.CharSequence chainId, java.lang.CharSequence v, java.lang.CharSequence r, java.lang.CharSequence s, java.lang.CharSequence yParity, java.lang.CharSequence timestamp) {
    this.blockHash = blockHash;
    this.blockNumber = blockNumber;
    this.from = from;
    this.gas = gas;
    this.gasPrice = gasPrice;
    this.maxFeePerGas = maxFeePerGas;
    this.maxPriorityFeePerGas = maxPriorityFeePerGas;
    this.hash = hash;
    this.input = input;
    this.nonce = nonce;
    this.to = to;
    this.transactionIndex = transactionIndex;
    this.value = value;
    this.type = type;
    this.chainId = chainId;
    this.v = v;
    this.r = r;
    this.s = s;
    this.yParity = yParity;
    this.timestamp = timestamp;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return blockHash;
    case 1: return blockNumber;
    case 2: return from;
    case 3: return gas;
    case 4: return gasPrice;
    case 5: return maxFeePerGas;
    case 6: return maxPriorityFeePerGas;
    case 7: return hash;
    case 8: return input;
    case 9: return nonce;
    case 10: return to;
    case 11: return transactionIndex;
    case 12: return value;
    case 13: return type;
    case 14: return chainId;
    case 15: return v;
    case 16: return r;
    case 17: return s;
    case 18: return yParity;
    case 19: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: blockHash = (java.lang.CharSequence)value$; break;
    case 1: blockNumber = (java.lang.CharSequence)value$; break;
    case 2: from = (java.lang.CharSequence)value$; break;
    case 3: gas = (java.lang.CharSequence)value$; break;
    case 4: gasPrice = (java.lang.CharSequence)value$; break;
    case 5: maxFeePerGas = (java.lang.CharSequence)value$; break;
    case 6: maxPriorityFeePerGas = (java.lang.CharSequence)value$; break;
    case 7: hash = (java.lang.CharSequence)value$; break;
    case 8: input = (java.lang.CharSequence)value$; break;
    case 9: nonce = (java.lang.CharSequence)value$; break;
    case 10: to = (java.lang.CharSequence)value$; break;
    case 11: transactionIndex = (java.lang.CharSequence)value$; break;
    case 12: value = (java.lang.CharSequence)value$; break;
    case 13: type = (java.lang.CharSequence)value$; break;
    case 14: chainId = (java.lang.CharSequence)value$; break;
    case 15: v = (java.lang.CharSequence)value$; break;
    case 16: r = (java.lang.CharSequence)value$; break;
    case 17: s = (java.lang.CharSequence)value$; break;
    case 18: yParity = (java.lang.CharSequence)value$; break;
    case 19: timestamp = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'blockHash' field.
   * @return The value of the 'blockHash' field.
   */
  public java.lang.CharSequence getBlockHash() {
    return blockHash;
  }


  /**
   * Sets the value of the 'blockHash' field.
   * @param value the value to set.
   */
  public void setBlockHash(java.lang.CharSequence value) {
    this.blockHash = value;
  }

  /**
   * Gets the value of the 'blockNumber' field.
   * @return The value of the 'blockNumber' field.
   */
  public java.lang.CharSequence getBlockNumber() {
    return blockNumber;
  }


  /**
   * Sets the value of the 'blockNumber' field.
   * @param value the value to set.
   */
  public void setBlockNumber(java.lang.CharSequence value) {
    this.blockNumber = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return The value of the 'from' field.
   */
  public java.lang.CharSequence getFrom() {
    return from;
  }


  /**
   * Sets the value of the 'from' field.
   * @param value the value to set.
   */
  public void setFrom(java.lang.CharSequence value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'gas' field.
   * @return The value of the 'gas' field.
   */
  public java.lang.CharSequence getGas() {
    return gas;
  }


  /**
   * Sets the value of the 'gas' field.
   * @param value the value to set.
   */
  public void setGas(java.lang.CharSequence value) {
    this.gas = value;
  }

  /**
   * Gets the value of the 'gasPrice' field.
   * @return The value of the 'gasPrice' field.
   */
  public java.lang.CharSequence getGasPrice() {
    return gasPrice;
  }


  /**
   * Sets the value of the 'gasPrice' field.
   * @param value the value to set.
   */
  public void setGasPrice(java.lang.CharSequence value) {
    this.gasPrice = value;
  }

  /**
   * Gets the value of the 'maxFeePerGas' field.
   * @return The value of the 'maxFeePerGas' field.
   */
  public java.lang.CharSequence getMaxFeePerGas() {
    return maxFeePerGas;
  }


  /**
   * Sets the value of the 'maxFeePerGas' field.
   * @param value the value to set.
   */
  public void setMaxFeePerGas(java.lang.CharSequence value) {
    this.maxFeePerGas = value;
  }

  /**
   * Gets the value of the 'maxPriorityFeePerGas' field.
   * @return The value of the 'maxPriorityFeePerGas' field.
   */
  public java.lang.CharSequence getMaxPriorityFeePerGas() {
    return maxPriorityFeePerGas;
  }


  /**
   * Sets the value of the 'maxPriorityFeePerGas' field.
   * @param value the value to set.
   */
  public void setMaxPriorityFeePerGas(java.lang.CharSequence value) {
    this.maxPriorityFeePerGas = value;
  }

  /**
   * Gets the value of the 'hash' field.
   * @return The value of the 'hash' field.
   */
  public java.lang.CharSequence getHash() {
    return hash;
  }


  /**
   * Sets the value of the 'hash' field.
   * @param value the value to set.
   */
  public void setHash(java.lang.CharSequence value) {
    this.hash = value;
  }

  /**
   * Gets the value of the 'input' field.
   * @return The value of the 'input' field.
   */
  public java.lang.CharSequence getInput() {
    return input;
  }


  /**
   * Sets the value of the 'input' field.
   * @param value the value to set.
   */
  public void setInput(java.lang.CharSequence value) {
    this.input = value;
  }

  /**
   * Gets the value of the 'nonce' field.
   * @return The value of the 'nonce' field.
   */
  public java.lang.CharSequence getNonce() {
    return nonce;
  }


  /**
   * Sets the value of the 'nonce' field.
   * @param value the value to set.
   */
  public void setNonce(java.lang.CharSequence value) {
    this.nonce = value;
  }

  /**
   * Gets the value of the 'to' field.
   * @return The value of the 'to' field.
   */
  public java.lang.CharSequence getTo() {
    return to;
  }


  /**
   * Sets the value of the 'to' field.
   * @param value the value to set.
   */
  public void setTo(java.lang.CharSequence value) {
    this.to = value;
  }

  /**
   * Gets the value of the 'transactionIndex' field.
   * @return The value of the 'transactionIndex' field.
   */
  public java.lang.CharSequence getTransactionIndex() {
    return transactionIndex;
  }


  /**
   * Sets the value of the 'transactionIndex' field.
   * @param value the value to set.
   */
  public void setTransactionIndex(java.lang.CharSequence value) {
    this.transactionIndex = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.CharSequence getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.CharSequence value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'chainId' field.
   * @return The value of the 'chainId' field.
   */
  public java.lang.CharSequence getChainId() {
    return chainId;
  }


  /**
   * Sets the value of the 'chainId' field.
   * @param value the value to set.
   */
  public void setChainId(java.lang.CharSequence value) {
    this.chainId = value;
  }

  /**
   * Gets the value of the 'v' field.
   * @return The value of the 'v' field.
   */
  public java.lang.CharSequence getV() {
    return v;
  }


  /**
   * Sets the value of the 'v' field.
   * @param value the value to set.
   */
  public void setV(java.lang.CharSequence value) {
    this.v = value;
  }

  /**
   * Gets the value of the 'r' field.
   * @return The value of the 'r' field.
   */
  public java.lang.CharSequence getR() {
    return r;
  }


  /**
   * Sets the value of the 'r' field.
   * @param value the value to set.
   */
  public void setR(java.lang.CharSequence value) {
    this.r = value;
  }

  /**
   * Gets the value of the 's' field.
   * @return The value of the 's' field.
   */
  public java.lang.CharSequence getS() {
    return s;
  }


  /**
   * Sets the value of the 's' field.
   * @param value the value to set.
   */
  public void setS(java.lang.CharSequence value) {
    this.s = value;
  }

  /**
   * Gets the value of the 'yParity' field.
   * @return The value of the 'yParity' field.
   */
  public java.lang.CharSequence getYParity() {
    return yParity;
  }


  /**
   * Sets the value of the 'yParity' field.
   * @param value the value to set.
   */
  public void setYParity(java.lang.CharSequence value) {
    this.yParity = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Creates a new TransactionRecord RecordBuilder.
   * @return A new TransactionRecord RecordBuilder
   */
  public static com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder newBuilder() {
    return new com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder();
  }

  /**
   * Creates a new TransactionRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionRecord RecordBuilder
   */
  public static com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder newBuilder(com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder other) {
    if (other == null) {
      return new com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder();
    } else {
      return new com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder(other);
    }
  }

  /**
   * Creates a new TransactionRecord RecordBuilder by copying an existing TransactionRecord instance.
   * @param other The existing instance to copy.
   * @return A new TransactionRecord RecordBuilder
   */
  public static com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder newBuilder(com.averiasconnect.blockpuller.model.avro.TransactionRecord other) {
    if (other == null) {
      return new com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder();
    } else {
      return new com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransactionRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionRecord>
    implements org.apache.avro.data.RecordBuilder<TransactionRecord> {

    private java.lang.CharSequence blockHash;
    private java.lang.CharSequence blockNumber;
    private java.lang.CharSequence from;
    private java.lang.CharSequence gas;
    private java.lang.CharSequence gasPrice;
    private java.lang.CharSequence maxFeePerGas;
    private java.lang.CharSequence maxPriorityFeePerGas;
    private java.lang.CharSequence hash;
    private java.lang.CharSequence input;
    private java.lang.CharSequence nonce;
    private java.lang.CharSequence to;
    private java.lang.CharSequence transactionIndex;
    private java.lang.CharSequence value;
    private java.lang.CharSequence type;
    private java.lang.CharSequence chainId;
    private java.lang.CharSequence v;
    private java.lang.CharSequence r;
    private java.lang.CharSequence s;
    private java.lang.CharSequence yParity;
    private java.lang.CharSequence timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.blockHash)) {
        this.blockHash = data().deepCopy(fields()[0].schema(), other.blockHash);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.blockNumber)) {
        this.blockNumber = data().deepCopy(fields()[1].schema(), other.blockNumber);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.from)) {
        this.from = data().deepCopy(fields()[2].schema(), other.from);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.gas)) {
        this.gas = data().deepCopy(fields()[3].schema(), other.gas);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.gasPrice)) {
        this.gasPrice = data().deepCopy(fields()[4].schema(), other.gasPrice);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.maxFeePerGas)) {
        this.maxFeePerGas = data().deepCopy(fields()[5].schema(), other.maxFeePerGas);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.maxPriorityFeePerGas)) {
        this.maxPriorityFeePerGas = data().deepCopy(fields()[6].schema(), other.maxPriorityFeePerGas);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.hash)) {
        this.hash = data().deepCopy(fields()[7].schema(), other.hash);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.input)) {
        this.input = data().deepCopy(fields()[8].schema(), other.input);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.nonce)) {
        this.nonce = data().deepCopy(fields()[9].schema(), other.nonce);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.to)) {
        this.to = data().deepCopy(fields()[10].schema(), other.to);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.transactionIndex)) {
        this.transactionIndex = data().deepCopy(fields()[11].schema(), other.transactionIndex);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.value)) {
        this.value = data().deepCopy(fields()[12].schema(), other.value);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.type)) {
        this.type = data().deepCopy(fields()[13].schema(), other.type);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.chainId)) {
        this.chainId = data().deepCopy(fields()[14].schema(), other.chainId);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.v)) {
        this.v = data().deepCopy(fields()[15].schema(), other.v);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.r)) {
        this.r = data().deepCopy(fields()[16].schema(), other.r);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.s)) {
        this.s = data().deepCopy(fields()[17].schema(), other.s);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.yParity)) {
        this.yParity = data().deepCopy(fields()[18].schema(), other.yParity);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[19].schema(), other.timestamp);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.averiasconnect.blockpuller.model.avro.TransactionRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.blockHash)) {
        this.blockHash = data().deepCopy(fields()[0].schema(), other.blockHash);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.blockNumber)) {
        this.blockNumber = data().deepCopy(fields()[1].schema(), other.blockNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.from)) {
        this.from = data().deepCopy(fields()[2].schema(), other.from);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gas)) {
        this.gas = data().deepCopy(fields()[3].schema(), other.gas);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gasPrice)) {
        this.gasPrice = data().deepCopy(fields()[4].schema(), other.gasPrice);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.maxFeePerGas)) {
        this.maxFeePerGas = data().deepCopy(fields()[5].schema(), other.maxFeePerGas);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.maxPriorityFeePerGas)) {
        this.maxPriorityFeePerGas = data().deepCopy(fields()[6].schema(), other.maxPriorityFeePerGas);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.hash)) {
        this.hash = data().deepCopy(fields()[7].schema(), other.hash);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.input)) {
        this.input = data().deepCopy(fields()[8].schema(), other.input);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.nonce)) {
        this.nonce = data().deepCopy(fields()[9].schema(), other.nonce);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.to)) {
        this.to = data().deepCopy(fields()[10].schema(), other.to);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.transactionIndex)) {
        this.transactionIndex = data().deepCopy(fields()[11].schema(), other.transactionIndex);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.value)) {
        this.value = data().deepCopy(fields()[12].schema(), other.value);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.type)) {
        this.type = data().deepCopy(fields()[13].schema(), other.type);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.chainId)) {
        this.chainId = data().deepCopy(fields()[14].schema(), other.chainId);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.v)) {
        this.v = data().deepCopy(fields()[15].schema(), other.v);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.r)) {
        this.r = data().deepCopy(fields()[16].schema(), other.r);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.s)) {
        this.s = data().deepCopy(fields()[17].schema(), other.s);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.yParity)) {
        this.yParity = data().deepCopy(fields()[18].schema(), other.yParity);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[19].schema(), other.timestamp);
        fieldSetFlags()[19] = true;
      }
    }

    /**
      * Gets the value of the 'blockHash' field.
      * @return The value.
      */
    public java.lang.CharSequence getBlockHash() {
      return blockHash;
    }


    /**
      * Sets the value of the 'blockHash' field.
      * @param value The value of 'blockHash'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setBlockHash(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.blockHash = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'blockHash' field has been set.
      * @return True if the 'blockHash' field has been set, false otherwise.
      */
    public boolean hasBlockHash() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'blockHash' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearBlockHash() {
      blockHash = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'blockNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getBlockNumber() {
      return blockNumber;
    }


    /**
      * Sets the value of the 'blockNumber' field.
      * @param value The value of 'blockNumber'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setBlockNumber(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.blockNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'blockNumber' field has been set.
      * @return True if the 'blockNumber' field has been set, false otherwise.
      */
    public boolean hasBlockNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'blockNumber' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearBlockNumber() {
      blockNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * @return The value.
      */
    public java.lang.CharSequence getFrom() {
      return from;
    }


    /**
      * Sets the value of the 'from' field.
      * @param value The value of 'from'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setFrom(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.from = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'from' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearFrom() {
      from = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'gas' field.
      * @return The value.
      */
    public java.lang.CharSequence getGas() {
      return gas;
    }


    /**
      * Sets the value of the 'gas' field.
      * @param value The value of 'gas'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setGas(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.gas = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'gas' field has been set.
      * @return True if the 'gas' field has been set, false otherwise.
      */
    public boolean hasGas() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'gas' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearGas() {
      gas = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'gasPrice' field.
      * @return The value.
      */
    public java.lang.CharSequence getGasPrice() {
      return gasPrice;
    }


    /**
      * Sets the value of the 'gasPrice' field.
      * @param value The value of 'gasPrice'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setGasPrice(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.gasPrice = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'gasPrice' field has been set.
      * @return True if the 'gasPrice' field has been set, false otherwise.
      */
    public boolean hasGasPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'gasPrice' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearGasPrice() {
      gasPrice = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxFeePerGas' field.
      * @return The value.
      */
    public java.lang.CharSequence getMaxFeePerGas() {
      return maxFeePerGas;
    }


    /**
      * Sets the value of the 'maxFeePerGas' field.
      * @param value The value of 'maxFeePerGas'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setMaxFeePerGas(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.maxFeePerGas = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'maxFeePerGas' field has been set.
      * @return True if the 'maxFeePerGas' field has been set, false otherwise.
      */
    public boolean hasMaxFeePerGas() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'maxFeePerGas' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearMaxFeePerGas() {
      maxFeePerGas = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxPriorityFeePerGas' field.
      * @return The value.
      */
    public java.lang.CharSequence getMaxPriorityFeePerGas() {
      return maxPriorityFeePerGas;
    }


    /**
      * Sets the value of the 'maxPriorityFeePerGas' field.
      * @param value The value of 'maxPriorityFeePerGas'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setMaxPriorityFeePerGas(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.maxPriorityFeePerGas = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'maxPriorityFeePerGas' field has been set.
      * @return True if the 'maxPriorityFeePerGas' field has been set, false otherwise.
      */
    public boolean hasMaxPriorityFeePerGas() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'maxPriorityFeePerGas' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearMaxPriorityFeePerGas() {
      maxPriorityFeePerGas = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'hash' field.
      * @return The value.
      */
    public java.lang.CharSequence getHash() {
      return hash;
    }


    /**
      * Sets the value of the 'hash' field.
      * @param value The value of 'hash'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setHash(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.hash = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'hash' field has been set.
      * @return True if the 'hash' field has been set, false otherwise.
      */
    public boolean hasHash() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'hash' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearHash() {
      hash = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'input' field.
      * @return The value.
      */
    public java.lang.CharSequence getInput() {
      return input;
    }


    /**
      * Sets the value of the 'input' field.
      * @param value The value of 'input'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setInput(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.input = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'input' field has been set.
      * @return True if the 'input' field has been set, false otherwise.
      */
    public boolean hasInput() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'input' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearInput() {
      input = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonce' field.
      * @return The value.
      */
    public java.lang.CharSequence getNonce() {
      return nonce;
    }


    /**
      * Sets the value of the 'nonce' field.
      * @param value The value of 'nonce'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setNonce(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.nonce = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'nonce' field has been set.
      * @return True if the 'nonce' field has been set, false otherwise.
      */
    public boolean hasNonce() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'nonce' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearNonce() {
      nonce = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'to' field.
      * @return The value.
      */
    public java.lang.CharSequence getTo() {
      return to;
    }


    /**
      * Sets the value of the 'to' field.
      * @param value The value of 'to'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setTo(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.to = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'to' field has been set.
      * @return True if the 'to' field has been set, false otherwise.
      */
    public boolean hasTo() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'to' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearTo() {
      to = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionIndex' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionIndex() {
      return transactionIndex;
    }


    /**
      * Sets the value of the 'transactionIndex' field.
      * @param value The value of 'transactionIndex'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setTransactionIndex(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.transactionIndex = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionIndex' field has been set.
      * @return True if the 'transactionIndex' field has been set, false otherwise.
      */
    public boolean hasTransactionIndex() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'transactionIndex' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearTransactionIndex() {
      transactionIndex = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.CharSequence getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setValue(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.value = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearValue() {
      value = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setType(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.type = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearType() {
      type = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'chainId' field.
      * @return The value.
      */
    public java.lang.CharSequence getChainId() {
      return chainId;
    }


    /**
      * Sets the value of the 'chainId' field.
      * @param value The value of 'chainId'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setChainId(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.chainId = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'chainId' field has been set.
      * @return True if the 'chainId' field has been set, false otherwise.
      */
    public boolean hasChainId() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'chainId' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearChainId() {
      chainId = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'v' field.
      * @return The value.
      */
    public java.lang.CharSequence getV() {
      return v;
    }


    /**
      * Sets the value of the 'v' field.
      * @param value The value of 'v'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setV(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.v = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'v' field has been set.
      * @return True if the 'v' field has been set, false otherwise.
      */
    public boolean hasV() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'v' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearV() {
      v = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'r' field.
      * @return The value.
      */
    public java.lang.CharSequence getR() {
      return r;
    }


    /**
      * Sets the value of the 'r' field.
      * @param value The value of 'r'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setR(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.r = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'r' field has been set.
      * @return True if the 'r' field has been set, false otherwise.
      */
    public boolean hasR() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'r' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearR() {
      r = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 's' field.
      * @return The value.
      */
    public java.lang.CharSequence getS() {
      return s;
    }


    /**
      * Sets the value of the 's' field.
      * @param value The value of 's'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setS(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.s = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 's' field has been set.
      * @return True if the 's' field has been set, false otherwise.
      */
    public boolean hasS() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 's' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearS() {
      s = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'yParity' field.
      * @return The value.
      */
    public java.lang.CharSequence getYParity() {
      return yParity;
    }


    /**
      * Sets the value of the 'yParity' field.
      * @param value The value of 'yParity'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setYParity(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.yParity = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'yParity' field has been set.
      * @return True if the 'yParity' field has been set, false otherwise.
      */
    public boolean hasYParity() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'yParity' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearYParity() {
      yParity = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.timestamp = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.averiasconnect.blockpuller.model.avro.TransactionRecord.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionRecord build() {
      try {
        TransactionRecord record = new TransactionRecord();
        record.blockHash = fieldSetFlags()[0] ? this.blockHash : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.blockNumber = fieldSetFlags()[1] ? this.blockNumber : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.from = fieldSetFlags()[2] ? this.from : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.gas = fieldSetFlags()[3] ? this.gas : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.gasPrice = fieldSetFlags()[4] ? this.gasPrice : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.maxFeePerGas = fieldSetFlags()[5] ? this.maxFeePerGas : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.maxPriorityFeePerGas = fieldSetFlags()[6] ? this.maxPriorityFeePerGas : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.hash = fieldSetFlags()[7] ? this.hash : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.input = fieldSetFlags()[8] ? this.input : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.nonce = fieldSetFlags()[9] ? this.nonce : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.to = fieldSetFlags()[10] ? this.to : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.transactionIndex = fieldSetFlags()[11] ? this.transactionIndex : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.value = fieldSetFlags()[12] ? this.value : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.type = fieldSetFlags()[13] ? this.type : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.chainId = fieldSetFlags()[14] ? this.chainId : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.v = fieldSetFlags()[15] ? this.v : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.r = fieldSetFlags()[16] ? this.r : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.s = fieldSetFlags()[17] ? this.s : (java.lang.CharSequence) defaultValue(fields()[17]);
        record.yParity = fieldSetFlags()[18] ? this.yParity : (java.lang.CharSequence) defaultValue(fields()[18]);
        record.timestamp = fieldSetFlags()[19] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[19]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionRecord>
    READER$ = (org.apache.avro.io.DatumReader<TransactionRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.blockHash);

    out.writeString(this.blockNumber);

    out.writeString(this.from);

    out.writeString(this.gas);

    out.writeString(this.gasPrice);

    if (this.maxFeePerGas == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.maxFeePerGas);
    }

    if (this.maxPriorityFeePerGas == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.maxPriorityFeePerGas);
    }

    out.writeString(this.hash);

    if (this.input == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.input);
    }

    out.writeString(this.nonce);

    if (this.to == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.to);
    }

    out.writeString(this.transactionIndex);

    out.writeString(this.value);

    out.writeString(this.type);

    if (this.chainId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.chainId);
    }

    out.writeString(this.v);

    out.writeString(this.r);

    out.writeString(this.s);

    if (this.yParity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.yParity);
    }

    out.writeString(this.timestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.blockHash = in.readString(this.blockHash instanceof Utf8 ? (Utf8)this.blockHash : null);

      this.blockNumber = in.readString(this.blockNumber instanceof Utf8 ? (Utf8)this.blockNumber : null);

      this.from = in.readString(this.from instanceof Utf8 ? (Utf8)this.from : null);

      this.gas = in.readString(this.gas instanceof Utf8 ? (Utf8)this.gas : null);

      this.gasPrice = in.readString(this.gasPrice instanceof Utf8 ? (Utf8)this.gasPrice : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.maxFeePerGas = null;
      } else {
        this.maxFeePerGas = in.readString(this.maxFeePerGas instanceof Utf8 ? (Utf8)this.maxFeePerGas : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.maxPriorityFeePerGas = null;
      } else {
        this.maxPriorityFeePerGas = in.readString(this.maxPriorityFeePerGas instanceof Utf8 ? (Utf8)this.maxPriorityFeePerGas : null);
      }

      this.hash = in.readString(this.hash instanceof Utf8 ? (Utf8)this.hash : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.input = null;
      } else {
        this.input = in.readString(this.input instanceof Utf8 ? (Utf8)this.input : null);
      }

      this.nonce = in.readString(this.nonce instanceof Utf8 ? (Utf8)this.nonce : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.to = null;
      } else {
        this.to = in.readString(this.to instanceof Utf8 ? (Utf8)this.to : null);
      }

      this.transactionIndex = in.readString(this.transactionIndex instanceof Utf8 ? (Utf8)this.transactionIndex : null);

      this.value = in.readString(this.value instanceof Utf8 ? (Utf8)this.value : null);

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.chainId = null;
      } else {
        this.chainId = in.readString(this.chainId instanceof Utf8 ? (Utf8)this.chainId : null);
      }

      this.v = in.readString(this.v instanceof Utf8 ? (Utf8)this.v : null);

      this.r = in.readString(this.r instanceof Utf8 ? (Utf8)this.r : null);

      this.s = in.readString(this.s instanceof Utf8 ? (Utf8)this.s : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.yParity = null;
      } else {
        this.yParity = in.readString(this.yParity instanceof Utf8 ? (Utf8)this.yParity : null);
      }

      this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);

    } else {
      for (int i = 0; i < 20; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.blockHash = in.readString(this.blockHash instanceof Utf8 ? (Utf8)this.blockHash : null);
          break;

        case 1:
          this.blockNumber = in.readString(this.blockNumber instanceof Utf8 ? (Utf8)this.blockNumber : null);
          break;

        case 2:
          this.from = in.readString(this.from instanceof Utf8 ? (Utf8)this.from : null);
          break;

        case 3:
          this.gas = in.readString(this.gas instanceof Utf8 ? (Utf8)this.gas : null);
          break;

        case 4:
          this.gasPrice = in.readString(this.gasPrice instanceof Utf8 ? (Utf8)this.gasPrice : null);
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.maxFeePerGas = null;
          } else {
            this.maxFeePerGas = in.readString(this.maxFeePerGas instanceof Utf8 ? (Utf8)this.maxFeePerGas : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.maxPriorityFeePerGas = null;
          } else {
            this.maxPriorityFeePerGas = in.readString(this.maxPriorityFeePerGas instanceof Utf8 ? (Utf8)this.maxPriorityFeePerGas : null);
          }
          break;

        case 7:
          this.hash = in.readString(this.hash instanceof Utf8 ? (Utf8)this.hash : null);
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.input = null;
          } else {
            this.input = in.readString(this.input instanceof Utf8 ? (Utf8)this.input : null);
          }
          break;

        case 9:
          this.nonce = in.readString(this.nonce instanceof Utf8 ? (Utf8)this.nonce : null);
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.to = null;
          } else {
            this.to = in.readString(this.to instanceof Utf8 ? (Utf8)this.to : null);
          }
          break;

        case 11:
          this.transactionIndex = in.readString(this.transactionIndex instanceof Utf8 ? (Utf8)this.transactionIndex : null);
          break;

        case 12:
          this.value = in.readString(this.value instanceof Utf8 ? (Utf8)this.value : null);
          break;

        case 13:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.chainId = null;
          } else {
            this.chainId = in.readString(this.chainId instanceof Utf8 ? (Utf8)this.chainId : null);
          }
          break;

        case 15:
          this.v = in.readString(this.v instanceof Utf8 ? (Utf8)this.v : null);
          break;

        case 16:
          this.r = in.readString(this.r instanceof Utf8 ? (Utf8)this.r : null);
          break;

        case 17:
          this.s = in.readString(this.s instanceof Utf8 ? (Utf8)this.s : null);
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.yParity = null;
          } else {
            this.yParity = in.readString(this.yParity instanceof Utf8 ? (Utf8)this.yParity : null);
          }
          break;

        case 19:
          this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










