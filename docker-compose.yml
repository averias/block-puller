version: "3.9"

services:
  db:
    image: postgres:latest
    container_name: ${COMPOSE_PROJECT_NAME}-db
    restart: unless-stopped
    env_file: ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_DB_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_DATABASE}
    ports:
      - ${POSTGRES_DB_LOCAL_PORT}:5432
    volumes:
      - ./database/postgres/dumps:/dumps
      - ./database/postgres/db:/var/lib/postgres
      - ./database/postgres/log:/var/log/postgres
      - ./database/postgres/conf:/etc/postgres/conf.d
      - ./database/postgres/initdb.d:/docker-entrypoint-initdb.d

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: ${COMPOSE_PROJECT_NAME}-kafka1
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka1:29092,CONTROLLER://kafka1:29093,EXTERNAL://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka1:29092,EXTERNAL://localhost:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      CLUSTER_ID: 'qVPDzmGvtxyyurSWt4PC1w=='
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_LOG_RETENTION_MS: ${ALL_TOPICS_RETENTION_MS}

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: ${COMPOSE_PROJECT_NAME}-kafka2
    hostname: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka2:29092,CONTROLLER://kafka2:29093,EXTERNAL://0.0.0.0:9093'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka2:29092,EXTERNAL://localhost:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      CLUSTER_ID: 'qVPDzmGvtxyyurSWt4PC1w=='
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_LOG_RETENTION_MS: ${ALL_TOPICS_RETENTION_MS}

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: ${COMPOSE_PROJECT_NAME}-kafka3
    hostname: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka3:29092,CONTROLLER://kafka3:29093,EXTERNAL://0.0.0.0:9094'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka3:29092,EXTERNAL://localhost:9094'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      CLUSTER_ID: 'qVPDzmGvtxyyurSWt4PC1w=='
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_LOG_RETENTION_MS: ${ALL_TOPICS_RETENTION_MS}

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: ${COMPOSE_PROJECT_NAME}-schema-registry
    hostname: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka1:29092,kafka2:29092,kafka3:29092'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    container_name: ${COMPOSE_PROJECT_NAME}-control-center
    restart: always
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka1:29092,kafka2:29092,kafka3:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 3
      PORT: 9021

  rest-proxy:
    image: confluentinc/cp-kafka-rest:latest
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - schema-registry
    ports:
      - "8082:8082"
    hostname: rest-proxy
    container_name: ${COMPOSE_PROJECT_NAME}-rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka1:29092,kafka2:29092,kafka3:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  kafka-init-topics:
    image: confluentinc/cp-kafka:latest
    container_name: ${COMPOSE_PROJECT_NAME}-kafka-init-topics
    env_file: ./.env
    depends_on:
      - kafka1
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka1:29092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka1:29092 --create --if-not-exists --topic json.transactions --replication-factor 3 --partitions 3 --config retention.ms=${JSON_TX_TOPIC_RETENTION_MS}
      kafka-topics --bootstrap-server kafka1:29092 --create --if-not-exists --topic avro.transactions --replication-factor 3 --partitions 3 --config retention.ms=${AVRO_TX_TOPIC_RETENTION_MS}
      kafka-topics --bootstrap-server kafka1:29092 --create --if-not-exists --topic avro.alert-matches --replication-factor 3 --partitions 3 --config retention.ms=${AVRO_ALERT_MATCHES_TOPIC_RETENTION_MS}
      kafka-topics --bootstrap-server kafka1:29092 --create --if-not-exists --topic json.alert-matches --replication-factor 3 --partitions 3 --config retention.ms=${JSON_ALERT_MATCHES_TOPIC_RETENTION_MS}
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka1:29092 --list
      "

  unleash:
    image: unleashorg/unleash-server:latest
    container_name: unleash-server
    restart: unless-stopped
    env_file: ./.env
    ports:
      - "4242:4242"
    environment:
      DATABASE_URL: "postgres://unleash_user:unleash_password@unleash-db/unleash"
      DATABASE_SSL: "false"
      LOG_LEVEL: "debug"
      INIT_FRONTEND_API_TOKENS: ${UNLEASH_INIT_FRONTEND_API_TOKEN}
      INIT_CLIENT_API_TOKENS: ${UNLEASH_INIT_CLIENT_API_TOKENS}
    depends_on:
      unleash-db:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:4242/health || exit 1
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s

  unleash-db:
    image: postgres:latest
    container_name: unleash-db
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: unleash
      POSTGRES_USER: unleash_user
      POSTGRES_PASSWORD: unleash_password
    healthcheck:
      test: [ "CMD", "pg_isready" ,"-d", "unleash", "-U", "unleash_user" ]
      interval: 2s
      timeout: 1m
      retries: 5
      start_period: 10s

#  block-puller-app:
#    image: block-puller
#    container_name: block-puller-app
#    env_file: ./.env
#    build:
#      context: .
#      dockerfile: Dockerfile
#    ports:
#      - "8085:8085"
#    depends_on:
#      - db
#      - kafka1
#      - kafka2
#      - kafka3
#      - schema-registry
#      - rest-proxy
#      - kafka-init-topics
#      - unleash

networks:
  default:
    name: block-puller
    external: true